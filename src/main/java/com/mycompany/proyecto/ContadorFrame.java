/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

/**
 *
 * @author CCCU
 */
public class ContadorFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private int contador;
    
    public ContadorFrame() {
        
        super("Contador");
        initComponents();
        boton.setText("Incrementar / Decrementar");
        contador = 0;

        // Configurar el frame
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 200);
        setLocationRelativeTo(null);

        // Configurar el panel
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(2, 1));
    }
    
    
     private void actualizarContador() {
        // Aquí puedes agregar lógica adicional para validar límites u otras restricciones si es necesario
    }

    private void actualizarLabel() {
    contadorLabel.setText("Contador: " + contador);
}

   
     /*private void actualizarBaseDeDatos() {
    Connection conexion = null;
    try {
        // Establecer conexión con la base de datos Access
        String url = "jdbc:ucanaccess://" + ".\\src" + ".\\main" + ".\\java" + ".\\AbsoluteLayout" + ".\\DB_Instagram2.accdb";
        conexion = DriverManager.getConnection(url);

        // Verificar si ya existe un registro en la tabla
        String consultaExistencia = "SELECT COUNT(*) AS total FROM Tabla1 WHERE id = 1";
        try (PreparedStatement statementExistencia = conexion.prepareStatement(consultaExistencia);
             ResultSet resultSet = statementExistencia.executeQuery()) {
            resultSet.next();
            int total = resultSet.getInt("total");
            if (total == 0) {
                // Si no existe, insertar un nuevo registro con contador = 1
                String sqlInsert = "INSERT INTO Tabla1 (id, Contador) VALUES (1, 1)";
                try (PreparedStatement statementInsert = conexion.prepareStatement(sqlInsert)) {
                    statementInsert.executeUpdate();
                }
            } else {
                // Si existe, actualizar el registro existente
                String sqlUpdate = "UPDATE Tabla1 SET Contador = ? WHERE id = 1";
                try (PreparedStatement statementUpdate = conexion.prepareStatement(sqlUpdate)) {
                    statementUpdate.setInt(1, 1); // Contador será 1 si el botón ha sido pulsado
                    statementUpdate.executeUpdate();
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    } finally {
        // Cerrar la conexión
        if (conexion != null) {
            try {
                conexion.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
}*/
    private void actualizarBaseDeDatos() {
    Connection conexion = null;
    try {
        // Establecer conexión con la base de datos Access
        String url = "jdbc:ucanaccess://" + ".\\src" + ".\\main" + ".\\java" + ".\\AbsoluteLayout" + ".\\DB_Instagram2.accdb";
        conexion = DriverManager.getConnection(url);

        // Verificar si ya existe un registro en la tabla
        String consultaExistencia = "SELECT COUNT(*) AS total FROM Tabla1 WHERE id = 1";
        try (PreparedStatement statementExistencia = conexion.prepareStatement(consultaExistencia);
             ResultSet resultSet = statementExistencia.executeQuery()) {
            resultSet.next();
            int total = resultSet.getInt("total");
            if (total == 0) {
                // Si no existe, no hacemos nada
                return;
            } else {
                // Si existe, eliminamos el dato en la columna contador
                String sqlUpdate = "UPDATE Tabla1 SET Contador = NULL WHERE id = 1";
                try (PreparedStatement statementUpdate = conexion.prepareStatement(sqlUpdate)) {
                    statementUpdate.executeUpdate();
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    } finally {
        // Cerrar la conexión
        if (conexion != null) {
            try {
                conexion.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
}
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boton = new javax.swing.JButton();
        contadorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boton.setText("\"Incrementar / Decrementar\"");
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        contadorLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(contadorLabel)
                .addGap(41, 41, 41)
                .addComponent(boton)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contadorLabel)
                    .addComponent(boton))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed
        String buttonText = boton.getText(); // Obtenemos el texto del botón
    
    if (buttonText.equals("Incrementar / Decrementar")) {
        // Verificamos si el contador ya ha sido modificado anteriormente
        boolean contadorModificado = (contador != 0);
        
        if (contadorModificado) {
            // Si el contador ha sido modificado anteriormente, restamos 1
            contador--;
        } else {
            // Si el contador no ha sido modificado anteriormente, sumamos 1
            contador++;
        }
        
        actualizarBaseDeDatos(); // Actualizamos la base de datos
        actualizarLabel(); // Actualizamos la etiqueta del contador
    }
    }//GEN-LAST:event_botonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContadorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContadorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContadorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContadorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ContadorFrame frame = new ContadorFrame();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton;
    private javax.swing.JLabel contadorLabel;
    // End of variables declaration//GEN-END:variables
}
